# Generated from Geralt.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,300,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,33,1,33,1,34,1,34,5,34,251,8,34,10,34,12,34,254,9,34,1,35,
        4,35,257,8,35,11,35,12,35,258,1,36,4,36,262,8,36,11,36,12,36,263,
        1,36,1,36,4,36,268,8,36,11,36,12,36,269,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,5,37,283,8,37,10,37,12,37,286,9,37,
        1,37,1,37,1,38,4,38,291,8,38,11,38,12,38,292,1,38,1,38,1,39,1,39,
        1,40,1,40,0,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,1,0,5,10,0,65,
        90,95,95,97,122,211,211,243,243,260,263,280,281,321,324,346,347,
        377,380,11,0,48,57,65,90,95,95,97,122,211,211,243,243,260,263,280,
        281,321,324,346,347,377,380,1,0,48,57,2,0,10,10,13,13,3,0,9,10,13,
        13,32,32,305,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,1,83,1,0,0,0,3,87,1,0,0,0,5,91,1,0,0,0,7,93,
        1,0,0,0,9,99,1,0,0,0,11,105,1,0,0,0,13,112,1,0,0,0,15,117,1,0,0,
        0,17,122,1,0,0,0,19,127,1,0,0,0,21,133,1,0,0,0,23,138,1,0,0,0,25,
        144,1,0,0,0,27,146,1,0,0,0,29,148,1,0,0,0,31,150,1,0,0,0,33,154,
        1,0,0,0,35,157,1,0,0,0,37,161,1,0,0,0,39,165,1,0,0,0,41,167,1,0,
        0,0,43,170,1,0,0,0,45,172,1,0,0,0,47,175,1,0,0,0,49,178,1,0,0,0,
        51,181,1,0,0,0,53,188,1,0,0,0,55,190,1,0,0,0,57,211,1,0,0,0,59,218,
        1,0,0,0,61,225,1,0,0,0,63,234,1,0,0,0,65,239,1,0,0,0,67,243,1,0,
        0,0,69,248,1,0,0,0,71,256,1,0,0,0,73,261,1,0,0,0,75,271,1,0,0,0,
        77,290,1,0,0,0,79,296,1,0,0,0,81,298,1,0,0,0,83,84,5,108,0,0,84,
        85,5,101,0,0,85,86,5,116,0,0,86,2,1,0,0,0,87,88,5,115,0,0,88,89,
        5,101,0,0,89,90,5,116,0,0,90,4,1,0,0,0,91,92,5,61,0,0,92,6,1,0,0,
        0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,112,0,0,96,97,5,117,0,
        0,97,98,5,116,0,0,98,8,1,0,0,0,99,100,5,112,0,0,100,101,5,114,0,
        0,101,102,5,105,0,0,102,103,5,110,0,0,103,104,5,116,0,0,104,10,1,
        0,0,0,105,106,5,114,0,0,106,107,5,101,0,0,107,108,5,116,0,0,108,
        109,5,117,0,0,109,110,5,114,0,0,110,111,5,110,0,0,111,12,1,0,0,0,
        112,113,5,73,0,0,113,114,5,103,0,0,114,115,5,110,0,0,115,116,5,105,
        0,0,116,14,1,0,0,0,117,118,5,65,0,0,118,119,5,97,0,0,119,120,5,114,
        0,0,120,121,5,100,0,0,121,16,1,0,0,0,122,123,5,81,0,0,123,124,5,
        117,0,0,124,125,5,101,0,0,125,126,5,110,0,0,126,18,1,0,0,0,127,128,
        5,89,0,0,128,129,5,114,0,0,129,130,5,100,0,0,130,131,5,101,0,0,131,
        132,5,110,0,0,132,20,1,0,0,0,133,134,5,116,0,0,134,135,5,114,0,0,
        135,136,5,117,0,0,136,137,5,101,0,0,137,22,1,0,0,0,138,139,5,102,
        0,0,139,140,5,97,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,143,
        5,101,0,0,143,24,1,0,0,0,144,145,5,40,0,0,145,26,1,0,0,0,146,147,
        5,41,0,0,147,28,1,0,0,0,148,149,5,44,0,0,149,30,1,0,0,0,150,151,
        5,65,0,0,151,152,5,78,0,0,152,153,5,68,0,0,153,32,1,0,0,0,154,155,
        5,79,0,0,155,156,5,82,0,0,156,34,1,0,0,0,157,158,5,88,0,0,158,159,
        5,79,0,0,159,160,5,82,0,0,160,36,1,0,0,0,161,162,5,78,0,0,162,163,
        5,69,0,0,163,164,5,71,0,0,164,38,1,0,0,0,165,166,5,60,0,0,166,40,
        1,0,0,0,167,168,5,60,0,0,168,169,5,61,0,0,169,42,1,0,0,0,170,171,
        5,62,0,0,171,44,1,0,0,0,172,173,5,62,0,0,173,174,5,61,0,0,174,46,
        1,0,0,0,175,176,5,61,0,0,176,177,5,61,0,0,177,48,1,0,0,0,178,179,
        5,33,0,0,179,180,5,61,0,0,180,50,1,0,0,0,181,182,5,106,0,0,182,183,
        5,101,0,0,183,184,5,380,0,0,184,185,5,101,0,0,185,186,5,108,0,0,
        186,187,5,105,0,0,187,52,1,0,0,0,188,189,5,58,0,0,189,54,1,0,0,0,
        190,191,5,119,0,0,191,192,5,95,0,0,192,193,5,112,0,0,193,194,5,114,
        0,0,194,195,5,122,0,0,195,196,5,101,0,0,196,197,5,99,0,0,197,198,
        5,105,0,0,198,199,5,119,0,0,199,200,5,110,0,0,200,201,5,121,0,0,
        201,202,5,109,0,0,202,203,5,95,0,0,203,204,5,119,0,0,204,205,5,121,
        0,0,205,206,5,112,0,0,206,207,5,97,0,0,207,208,5,100,0,0,208,209,
        5,107,0,0,209,210,5,117,0,0,210,56,1,0,0,0,211,212,5,107,0,0,212,
        213,5,111,0,0,213,214,5,110,0,0,214,215,5,105,0,0,215,216,5,101,
        0,0,216,217,5,99,0,0,217,58,1,0,0,0,218,219,5,100,0,0,219,220,5,
        111,0,0,220,221,5,112,0,0,221,222,5,243,0,0,222,223,5,107,0,0,223,
        224,5,105,0,0,224,60,1,0,0,0,225,226,5,122,0,0,226,227,5,97,0,0,
        227,228,5,107,0,0,228,229,5,108,0,0,229,230,5,281,0,0,230,231,5,
        99,0,0,231,232,5,105,0,0,232,233,5,101,0,0,233,62,1,0,0,0,234,235,
        5,87,0,0,235,236,5,105,0,0,236,237,5,108,0,0,237,238,5,107,0,0,238,
        64,1,0,0,0,239,240,5,75,0,0,240,241,5,111,0,0,241,242,5,116,0,0,
        242,66,1,0,0,0,243,244,5,71,0,0,244,245,5,114,0,0,245,246,5,121,
        0,0,246,247,5,102,0,0,247,68,1,0,0,0,248,252,7,0,0,0,249,251,7,1,
        0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,
        0,0,253,70,1,0,0,0,254,252,1,0,0,0,255,257,7,2,0,0,256,255,1,0,0,
        0,257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,72,1,0,0,0,
        260,262,7,2,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,
        263,264,1,0,0,0,264,265,1,0,0,0,265,267,5,46,0,0,266,268,7,2,0,0,
        267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,
        270,74,1,0,0,0,271,272,5,75,0,0,272,273,5,111,0,0,273,274,5,109,
        0,0,274,275,5,101,0,0,275,276,5,110,0,0,276,277,5,116,0,0,277,278,
        5,97,0,0,278,279,5,114,0,0,279,280,5,122,0,0,280,284,1,0,0,0,281,
        283,8,3,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,
        285,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,6,37,0,0,288,
        76,1,0,0,0,289,291,7,4,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,
        1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,6,38,0,0,295,78,
        1,0,0,0,296,297,5,91,0,0,297,80,1,0,0,0,298,299,5,93,0,0,299,82,
        1,0,0,0,7,0,252,258,263,269,284,292,1,6,0,0
    ]

class GeraltLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    ID = 35
    INT = 36
    FLOAT = 37
    COMMENT = 38
    WHITE_SPACE = 39
    LBRACK = 40
    RBRACK = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'let'", "'set'", "'='", "'input'", "'print'", "'return'", "'Igni'", 
            "'Aard'", "'Quen'", "'Yrden'", "'true'", "'false'", "'('", "')'", 
            "','", "'AND'", "'OR'", "'XOR'", "'NEG'", "'<'", "'<='", "'>'", 
            "'>='", "'=='", "'!='", "'je\\u017Celi'", "':'", "'w_przeciwnym_wypadku'", 
            "'koniec'", "'dop\\u00F3ki'", "'zakl\\u0119cie'", "'Wilk'", 
            "'Kot'", "'Gryf'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "COMMENT", "WHITE_SPACE", "LBRACK", "RBRACK" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "ID", "INT", "FLOAT", "COMMENT", "WHITE_SPACE", 
                  "LBRACK", "RBRACK" ]

    grammarFileName = "Geralt.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


